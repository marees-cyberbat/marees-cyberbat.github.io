{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Row","Video","video","App","UserVideo","PartnerVideo","incomingCall","useState","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","userVideo","useRef","partnerVideo","socket","useEffect","current","io","connect","navigator","mediaDevices","getUserMedia","audio","then","srcObject","on","id","data","from","signal","playsInline","muted","ref","autoPlay","onClick","peer","Peer","initiator","trickle","emit","to","Object","keys","map","key","config","iceServers","urls","username","credential","userToCall","signalData","callPeer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1484bd0.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Video = styled.video`\n  border: 1px solid blue;\n  width: 50%;\n  height: 50%;\n`;\n\nfunction App() {\n  const [yourID, setYourID] = useState(\"\");\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n\n  useEffect(() => {\n    socket.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    })\n\n    socket.current.on(\"yourID\", (id) => {\n      setYourID(id);\n    })\n    socket.current.on(\"allUsers\", (users) => {\n      setUsers(users);\n    })\n\n    socket.current.on(\"hey\", (data) => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    })\n  }, []);\n\n  function callPeer(id) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      config: {\n\n        iceServers: [\n            {\n                urls: \"stun:numb.viagenie.ca\",\n                username: \"sultan1640@gmail.com\",\n                credential: \"98376683\"\n            },\n            {\n                urls: \"turn:numb.viagenie.ca\",\n                username: \"sultan1640@gmail.com\",\n                credential: \"98376683\"\n            }\n        ]\n    },\n      stream: stream,\n    });\n\n    peer.on(\"signal\", data => {\n      socket.current.emit(\"callUser\", { userToCall: id, signalData: data, from: yourID })\n    })\n\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n\n    socket.current.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    })\n\n  }\n\n  function acceptCall() {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream,\n    });\n    peer.on(\"signal\", data => {\n      socket.current.emit(\"acceptCall\", { signal: data, to: caller })\n    })\n\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n\n    peer.signal(callerSignal);\n  }\n\n  let UserVideo;\n  if (stream) {\n    UserVideo = (\n      <Video playsInline muted ref={userVideo} autoPlay />\n    );\n  }\n\n  let PartnerVideo;\n  if (callAccepted) {\n    PartnerVideo = (\n      <Video playsInline ref={partnerVideo} autoPlay />\n    );\n  }\n\n  let incomingCall;\n  if (receivingCall) {\n    incomingCall = (\n      <div>\n        <h1>{caller} is calling you</h1>\n        <button onClick={acceptCall}>Accept</button>\n      </div>\n    )\n  }\n  return (\n    <Container>\n      <Row>\n        {UserVideo}\n        {PartnerVideo}\n      </Row>\n      <Row>\n        {Object.keys(users).map(key => {\n          if (key === yourID) {\n            return null;\n          }\n          return (\n            <button onClick={() => callPeer(key)}>Call {key}</button>\n          );\n        })}\n      </Row>\n      <Row>\n        {incomingCall}\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}